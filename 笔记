models.Host.objects 想跨表都需要 双下划线 '__'

跨表操作，取business中的caption，需要__ django里面会自动将__处理为跨表操作，b带表business对象，但是不可以用b.caption，报错！！！
v2 = models.Host.objects.filter(nid__gt=0).values('nid', 'hostname', 'b_id', 'b__caption')
v2 的类型，QuerySet:   [ {}, {}, {}..] 列表套字典，每行数据为一个字典
v3 = models.Host.objects.filter(nid__gt=0).valuelist('nid', 'hostname', 'b_id', 'b__caption')
v3 type list  html中  row in v3     v3.1 = hostname   v3.3= b__caption
循环v2
    for row in v2:
        print(row['nid'],row['hostname'], row['b_id', row['b__caption']]


    html for循环
        forloop.counter
        forloop.couter0



    需要渲染用render
    不需要渲染的 redirect


ajax html 使用  替代form
    ajax 使用 id 定位标签取值
$(function () {
    $("#ajax_submit").click(function(){
                $.ajax({
                    url: '/cmdb/test_ajax/',
                    type: 'POST',
                    data: {'hostname': $('#hostname').val(),  # 根据标签中的id 获取值，传入给/cmdb/test_ajax路由函数
                        'ip':$('#ip').val(),                  # 传入的结果，使用$(id).val()获取，views函数使用key取值
                        'port': $('#port').val(),
                        'bid': $('#bid').val(),
                    },
                    success: function(rt){                    # views 函数 返回状态 = rt，rt可以用任意字符替换
                        if(rt=='ok'){
                            location.reload();                # 刷新页面
                        }else{
                            alert(rt)                         # 弹出警告窗口
                        }
                    }
                })
            })
    })


Ajax
            就是用ajax，来处理请求
            $.ajax

            下面方法内部都调用 $.ajax方法，只是替换type
            $.get(url='xx',data='{}',success='xx')
            $.getjson
            $.post
            字符串转换对象
            var obj = JSON.parse(return_result)

            JSON.stringify(obj) 对象转换成字符串
            JSON.parse(str)     字符串转换成对象

            建议，永远让服务器端返回个字典，服务器端返回之前处理
                return HttpResponse(json.dumps(dict))

                html接收端ajax
                    obj = JSON.parse(服务器端返回的str)

                    获取字典值，obj.key


多对多关系表：
    一、自定义关系表  自定义的，关系表可以随意创建列
        ** 操作第三张表，创建数据
            model.HostToApp.objects.create(hobj_id=1,aobj_id=2)

            class Host(models.Model):
                # 自动生成id主键列 不写的话
                nid = models.AutoField(primary_key=True) # 自增
                hostname = models.CharField(max_length=32, db_index=True)
                ip = models.GenericIPAddressField(protocol='ipv4', db_index=True)  # ip类型实际是Char,默认支持ipv4,ipv6，可以指定protocol='ipv4'
                port = models.IntegerField()
                # 主机分配业务线
                b = models.ForeignKey(to='Business', to_field='id', on_delete=True)

            # 10 条

            class Application(models.Model):
                name = models.CharField(max_length=32)
            # 5条

            # 关系表
            class HostToApp(models.Model):
                hobj = models.ForeignKey(to='Host', to_field='nid', on_delete=True)
                aobj = models.ForeignKey(to='Application', to_field='id', on_delete=True)

    二、自动创建关系表  自动创建，只建立关系列
       ** 无法直接对第三张关系表进行操作
        class Host(models.Model):
            # 自动生成id主键列 不写的话
            nid = models.AutoField(primary_key=True) # 自增
            hostname = models.CharField(max_length=32, db_index=True)
            ip = models.GenericIPAddressField(protocol='ipv4', db_index=True)  # ip类型实际是Char,默认支持ipv4,ipv6，可以指定protocol='ipv4'
            port = models.IntegerField()
            # 主机分配业务线
            b = models.ForeignKey(to='Business', to_field='id', on_delete=True)


        class Application(models.Model):
            name = models.CharField(max_length=32)
            relation = models.ManyToManyField("Host")

            obj = Application.objects.get(id=1)
            obj.name
            obj.relation.add(1) 表示在第三张表里增加一个1对应1，
            obj.relation.add(*[1,2,3,4])  11  12  13  14 增加对应关系

            obj.relation.remove(1)
            obj.relation.remove(2,4)
            obj.relation.remove(*[1,2,3])

            obj.relation.clear() 只清理素有appid= 1的

            最终保留关系设置
            obj.relation.set([3,5,7]) 这个操作昨晚，表里面只会存在，1:3   1:5  1:7 ，其他都清除


            obj.r.all()